'use client';

import React, { useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';

function DailyReportContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // Get form data from URL params
  const educatorFirstName = searchParams?.get('educatorFirstName') || '';
  const educatorLastName = searchParams?.get('educatorLastName') || '';
  const studentFirstName = searchParams?.get('studentFirstName') || '';
  const studentLastName = searchParams?.get('studentLastName') || '';
  const date = searchParams?.get('date') || '';
  const room = searchParams?.get('room') || '';
  
  const [engagementSummary, setEngagementSummary] = useState('');
  const [learning, setLearning] = useState('');
  const [whatsNext, setWhatsNext] = useState('');
  const [educatorComment, setEducatorComment] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedReport, setGeneratedReport] = useState('');

  const handleGenerateReport = async () => {
    if (!engagementSummary.trim()) {
      alert('Please enter the engagement summary.');
      return;
    }
    
    setIsGenerating(true);
    
    try {
      // Import AI service dynamically to avoid SSR issues
      const { aiService } = await import('@/utils/aiService');
      
      const aiResponse = await aiService.generateDailyReport(
        `${educatorFirstName} ${educatorLastName}`,
        `${studentFirstName} ${studentLastName}`,
        room,
        date,
        engagementSummary,
        learning,
        whatsNext,
        educatorComment
      );
      
      const report = `**Daily Report**

**Date:** ${date}
**Educator:** ${educatorFirstName} ${educatorLastName}
**Student:** ${studentFirstName} ${studentLastName}
**Room:** ${room}

**Engagement Summary:**
${aiResponse.engagementSummary}

**Learning Highlights:**
${aiResponse.learning}

**What's Next:**
${aiResponse.whatsNext}

**Educator's Comment:**
${aiResponse.educatorComment}

*Report generated by Smart Story Studio AI*`;
      
      setGeneratedReport(report);
    } catch (error) {
      console.error('AI generation error:', error);
      alert('Error generating AI report. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleBack = () => {
    router.push('/');
  };

  const formattedDate = new Date(date).toLocaleDateString('en-GB', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });

  return (
    <div className="page-background min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-8">
            <button 
              onClick={handleBack}
              className="text-xl font-semibold text-blue-600 flex items-center bg-white bg-opacity-80 px-3 py-2 rounded-lg shadow-sm"
            >
              ‚Üê Back
            </button>
            <div className="text-center">
              <div className="w-16 h-16 mx-auto mb-2 bg-white rounded-xl shadow-lg flex items-center justify-center">
                <Image
                  src="/ss-logo.png"
                  alt="Smart Story Studio Logo"
                  width={64}
                  height={64}
                  className="rounded-lg"
                />
              </div>
              <h1 className="text-2xl font-black text-black">Daily Report</h1>
            </div>
            <button 
              onClick={() => router.push('/')}
              className="text-lg font-semibold text-white flex items-center bg-blue-600 px-3 py-2 rounded-lg shadow-sm"
            >
              üè† Home
            </button>
          </div>

          {/* Report Info */}
          <div className="bg-white rounded-lg p-6 mb-6">
            <div className="grid grid-cols-2 gap-4 text-lg text-black">
              <div><strong>Date:</strong> {formattedDate}</div>
              <div><strong>Educator:</strong> {educatorFirstName} {educatorLastName}</div>
              <div><strong>Student:</strong> {studentFirstName} {studentLastName}</div>
              <div><strong>Room:</strong> {room}</div>
            </div>
          </div>

          {/* Form */}
          <div className="bg-white rounded-lg p-6 mb-6">
            <div className="space-y-6">
              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  Engagement Summary <span className="text-red-500">*</span>
                </label>
                <textarea
                  value={engagementSummary}
                  onChange={(e) => setEngagementSummary(e.target.value)}
                  placeholder="Describe the child&apos;s engagement and activities..."
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-32 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>

              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  Learning Activities
                </label>
                <textarea
                  value={learning}
                  onChange={(e) => setLearning(e.target.value)}
                  placeholder="What learning activities did the child participate in?"
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-24 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>

              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  What&apos;s Next
                </label>
                <textarea
                  value={whatsNext}
                  onChange={(e) => setWhatsNext(e.target.value)}
                  placeholder="What are the next steps for development?"
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-24 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>

              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  Educator&apos;s Comment
                </label>
                <textarea
                  value={educatorComment}
                  onChange={(e) => setEducatorComment(e.target.value)}
                  placeholder="Any additional comments or observations?"
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-24 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>
            </div>
          </div>

          {/* Generate Button */}
          <button
            onClick={handleGenerateReport}
            disabled={isGenerating || !engagementSummary.trim()}
            className="w-full p-4 text-2xl font-bold text-white rounded-lg transition-all duration-200 mb-6"
            style={{
              backgroundColor: engagementSummary.trim() ? '#AACABB' : 'rgba(128, 128, 128, 0.5)',
              cursor: engagementSummary.trim() ? 'pointer' : 'not-allowed'
            }}
          >
            {isGenerating ? 'Generating Report...' : 'Generate AI Report'}
          </button>

          {/* Export Buttons */}
          <div className="flex gap-4 mb-6">
            <button
              onClick={() => {
                // Navigate to preview with report data
                const params = new URLSearchParams({
                  title: 'Daily Report',
                  educatorName: `${educatorFirstName} ${educatorLastName}`,
                  studentName: `${studentFirstName} ${studentLastName}`,
                  room: room,
                  date: date,
                  content: generatedReport,
                  reportType: 'Daily'
                });
                router.push(`/preview?${params.toString()}`);
              }}
              className="flex-1 p-4 text-xl font-bold text-white bg-orange-500 rounded-lg transition-all duration-200"
            >
              Preview
            </button>
            <button
              onClick={async () => {
                try {
                  const { pdfService } = await import('@/utils/pdfService');
                  await pdfService.downloadPDF({
                    title: 'Daily Report',
                    educatorName: `${educatorFirstName} ${educatorLastName}`,
                    studentName: `${studentFirstName} ${studentLastName}`,
                    room: room,
                    date: date,
                    content: generatedReport,
                    reportType: 'Daily'
                  });
                } catch (error) {
                  console.error('PDF download error:', error);
                  alert('Failed to download PDF. Please try again.');
                }
              }}
              className="flex-1 p-4 text-xl font-bold text-white bg-blue-600 rounded-lg transition-all duration-200"
            >
              Download PDF
            </button>
          </div>

          {/* Generated Report */}
          {generatedReport && (
            <div className="bg-white rounded-lg p-6">
              <h2 className="text-2xl font-bold text-black mb-4">Generated Report</h2>
              <div className="bg-gray-50 rounded-lg p-4 whitespace-pre-wrap text-lg">
                {generatedReport}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function DailyReportPage() {
  return (
    <Suspense fallback={<div className="page-background min-h-screen flex items-center justify-center">
      <div className="text-2xl font-bold text-black">Loading...</div>
    </div>}>
      <DailyReportContent />
    </Suspense>
  );
} 