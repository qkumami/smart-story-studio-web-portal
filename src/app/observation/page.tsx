'use client';

import React, { useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';

function ObservationReportContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // Get form data from URL params
  const educatorFirstName = searchParams?.get('educatorFirstName') || '';
  const educatorLastName = searchParams?.get('educatorLastName') || '';
  const studentFirstName = searchParams?.get('studentFirstName') || '';
  const studentLastName = searchParams?.get('studentLastName') || '';
  const date = searchParams?.get('date') || '';
  const room = searchParams?.get('room') || '';
  
  const [activityDescription, setActivityDescription] = useState('');
  const [learningOutcomes, setLearningOutcomes] = useState('');
  const [whatsNext, setWhatsNext] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedReport, setGeneratedReport] = useState('');
  const [selectedFocusAreas, setSelectedFocusAreas] = useState<string[]>([]);

  const focusAreas = ["Wellbeing", "Identity", "Learning", "Communication", "Community"];

  const toggleFocusArea = (area: string) => {
    setSelectedFocusAreas(prev => 
      prev.includes(area) 
        ? prev.filter(a => a !== area)
        : [...prev, area]
    );
  };

  const handleGenerateReport = async () => {
    if (!activityDescription.trim()) {
      alert('Please enter the activity description.');
      return;
    }
    
    setIsGenerating(true);
    
    // Simulate AI report generation
    setTimeout(() => {
      const report = `**Observation Report**

**Date:** ${date}
**Educator:** ${educatorFirstName} ${educatorLastName}
**Student:** ${studentFirstName} ${studentLastName}
**Room:** ${room}

**Activity Description:**
${activityDescription}

**Learning Outcomes:**
${learningOutcomes || 'To be observed during the activity.'}

**What's Next:**
${whatsNext || 'Continue monitoring and supporting the child&apos;s development.'}

*Report generated by Smart Story Studio AI*`;
      
      setGeneratedReport(report);
      setIsGenerating(false);
    }, 3000);
  };

  const handleBack = () => {
    router.push('/');
  };

  const formattedDate = new Date(date).toLocaleDateString('en-GB', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });

  return (
    <div className="page-background min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-8">
            <button 
              onClick={handleBack}
              className="text-xl font-semibold text-blue-600 flex items-center bg-white bg-opacity-80 px-3 py-2 rounded-lg shadow-sm"
            >
              ‚Üê Back
            </button>
            <div className="text-center">
              <div className="w-20 h-20 mx-auto mb-2 bg-white rounded-2xl shadow-lg flex items-center justify-center p-1">
                <Image
                  src="/ss-logo.png"
                  alt="Smart Story Studio Logo"
                  width={60}
                  height={60}
                  className="rounded-xl"
                />
              </div>
              <h1 className="text-2xl font-black text-black">Observation Report</h1>
            </div>
            <button 
              onClick={() => router.push('/')}
              className="text-lg font-semibold text-white flex items-center bg-blue-600 px-3 py-2 rounded-lg shadow-sm"
            >
              üè† Home
            </button>
          </div>

          {/* Report Info */}
          <div className="bg-white rounded-lg p-6 mb-6">
            <div className="grid grid-cols-2 gap-4 text-lg text-black">
              <div><strong>Date:</strong> {formattedDate}</div>
              <div><strong>Educator:</strong> {educatorFirstName} {educatorLastName}</div>
              <div><strong>Student:</strong> {studentFirstName} {studentLastName}</div>
              <div><strong>Room:</strong> {room}</div>
            </div>
          </div>

          {/* Form */}
          <div className="bg-white rounded-lg p-6 mb-6">
            <div className="space-y-6">
              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  Activity Description <span className="text-red-500">*</span>
                </label>
                <textarea
                  value={activityDescription}
                  onChange={(e) => setActivityDescription(e.target.value)}
                  placeholder="Describe the activity and child&apos;s engagement..."
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-32 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>

              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  Learning Outcomes
                </label>
                <textarea
                  value={learningOutcomes}
                  onChange={(e) => setLearningOutcomes(e.target.value)}
                  placeholder="What did the child learn or demonstrate?"
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-24 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>

              <div>
                <label className="block text-xl font-semibold text-black mb-2">
                  What&apos;s Next
                </label>
                <textarea
                  value={whatsNext}
                  onChange={(e) => setWhatsNext(e.target.value)}
                  placeholder="Plan for next steps or follow-up activities..."
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg min-h-24 resize-none text-black"
                  style={{ caretColor: 'black' }}
                />
              </div>
            </div>
          </div>

          {/* Focus Areas Section */}
          <div className="bg-white rounded-lg p-6 mb-6">
            <h2 className="text-xl font-semibold text-black mb-4">Select Focus Areas:</h2>
            <div className="grid grid-cols-3 gap-3">
              {focusAreas.map((area) => (
                <button
                  key={area}
                  onClick={() => toggleFocusArea(area)}
                  className={`p-3 rounded-2xl border transition-all duration-200 ${
                    selectedFocusAreas.includes(area)
                      ? 'bg-blue-600 text-white border-blue-600'
                      : 'bg-white text-black border-gray-300 hover:border-blue-300'
                  }`}
                >
                  {area}
                </button>
              ))}
            </div>
          </div>

          {/* Generate Button */}
          <button
            onClick={handleGenerateReport}
            disabled={isGenerating || !activityDescription.trim()}
            className="w-full p-4 text-2xl font-bold text-white rounded-lg transition-all duration-200 mb-6"
            style={{
              backgroundColor: activityDescription.trim() ? '#AACABB' : 'rgba(128, 128, 128, 0.5)',
              cursor: activityDescription.trim() ? 'pointer' : 'not-allowed'
            }}
          >
            {isGenerating ? 'Generating Report...' : 'Generate AI Report'}
          </button>

          {/* Export Buttons */}
          <div className="flex gap-4 mb-6">
            <button
              onClick={() => {
                // Simulate email functionality
                alert('Email functionality would be implemented here');
              }}
              className="flex-1 p-4 text-xl font-bold text-white bg-green-600 rounded-lg transition-all duration-200"
            >
              Send via Email
            </button>
            <button
              onClick={() => {
                // Simulate preview functionality
                alert('Preview functionality would be implemented here');
              }}
              className="flex-1 p-4 text-xl font-bold text-white bg-orange-500 rounded-lg transition-all duration-200"
            >
              Preview
            </button>
          </div>

          {/* Generated Report */}
          {generatedReport && (
            <div className="bg-white rounded-lg p-6">
              <h2 className="text-2xl font-bold text-black mb-4">Generated Report</h2>
              <div className="bg-gray-50 rounded-lg p-4 whitespace-pre-wrap text-lg">
                {generatedReport}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function ObservationReportPage() {
  return (
    <Suspense fallback={<div className="page-background min-h-screen flex items-center justify-center">
      <div className="text-2xl font-bold text-black">Loading...</div>
    </div>}>
      <ObservationReportContent />
    </Suspense>
  );
} 