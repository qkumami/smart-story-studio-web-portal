// PDF Generation Service for Smart Story Studio Web Portal
// Matches iOS Build 3 PDF functionality

interface PDFOptions {
  title: string;
  educatorName: string;
  studentName: string;
  room: string;
  date: string;
  content: string;
  reportType: 'Daily' | 'Progress' | 'Observation';
}

class PDFService {
  private generatePDFContent(options: PDFOptions): string {
    const { title, educatorName, studentName, room, date, content, reportType } = options;
    
    const formattedDate = new Date(date).toLocaleDateString('en-GB', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${title}</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 40px;
            background: white;
            color: #333;
            line-height: 1.6;
          }
          .header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 3px solid #007AFF;
            padding-bottom: 20px;
          }
          .logo {
            width: 80px;
            height: 80px;
            margin: 0 auto 20px;
            display: block;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          }
          .title {
            font-size: 32px;
            font-weight: 900;
            color: #007AFF;
            margin: 0 0 10px 0;
          }
          .subtitle {
            font-size: 24px;
            font-weight: 700;
            color: #333;
            margin: 0;
          }
          .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
          }
          .info-item {
            display: flex;
            align-items: center;
          }
          .info-label {
            font-weight: 600;
            color: #007AFF;
            margin-right: 10px;
            min-width: 80px;
          }
          .info-value {
            font-weight: 500;
          }
          .content {
            margin-top: 30px;
            white-space: pre-wrap;
            font-size: 16px;
            line-height: 1.8;
          }
          .footer {
            margin-top: 40px;
            text-align: center;
            color: #666;
            font-size: 14px;
            border-top: 1px solid #eee;
            padding-top: 20px;
          }
          .page-break {
            page-break-before: always;
          }
          @media print {
            body { margin: 0; }
            .page-break { page-break-before: always; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">ðŸ“š</div>
          <h1 class="title">Smart Story Studio</h1>
          <h2 class="subtitle">${title}</h2>
        </div>
        
        <div class="info-grid">
          <div class="info-item">
            <span class="info-label">Date:</span>
            <span class="info-value">${formattedDate}</span>
          </div>
          <div class="info-item">
            <span class="info-label">Educator:</span>
            <span class="info-value">${educatorName}</span>
          </div>
          <div class="info-item">
            <span class="info-label">Student:</span>
            <span class="info-value">${studentName}</span>
          </div>
          <div class="info-item">
            <span class="info-label">Room:</span>
            <span class="info-value">${room}</span>
          </div>
        </div>
        
        <div class="content">
          ${content}
        </div>
        
        <div class="footer">
          <p>Report generated by Smart Story Studio AI</p>
          <p>${formattedDate} â€¢ ${reportType} Report</p>
        </div>
      </body>
      </html>
    `;
  }

  async generatePDF(options: PDFOptions): Promise<Blob> {
    try {
      const htmlContent = this.generatePDFContent(options);
      
      // Use jsPDF with html2canvas for PDF generation
      const { jsPDF } = await import('jspdf');
      const html2canvas = await import('html2canvas');
      
      // Create a temporary div to render the HTML
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = htmlContent;
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.top = '0';
      document.body.appendChild(tempDiv);
      
      // Convert HTML to canvas
      const canvas = await html2canvas.default(tempDiv, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });
      
      // Remove temporary div
      document.body.removeChild(tempDiv);
      
      // Create PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;
      
      // Add first page
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      
      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      return pdf.output('blob');
    } catch (error) {
      console.error('PDF generation error:', error);
      throw new Error('Failed to generate PDF');
    }
  }

  async downloadPDF(options: PDFOptions, filename?: string): Promise<void> {
    try {
      const blob = await this.generatePDF(options);
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename || `smart-story-studio-${options.reportType.toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('PDF download error:', error);
      throw error;
    }
  }

  async getPDFBlob(options: PDFOptions): Promise<Blob> {
    return await this.generatePDF(options);
  }
}

export const pdfService = new PDFService(); 